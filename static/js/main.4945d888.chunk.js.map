{"version":3,"sources":["App.js","index.js"],"names":["Rephrase","useState","text","setText","languageStyle","setLanguageStyle","translateToArabic","setTranslateToArabic","rephrasedText","setRephrasedText","apiKey","setAPIKey","rephraseText","headers","prompt","data","temperature","axios","post","response","choices","console","error","className","value","onChange","e","target","type","checked","onClick","disabled","rootElement","document","getElementById","createRoot","render","App"],"mappings":"4LA6EeA,EAzEE,WACf,MAAwBC,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KACpB,EAA0CF,mBAAS,SAAQ,mBAApDG,EAAa,KAAEC,EAAgB,KACtC,EAAkDJ,oBAAS,GAAM,mBAA1DK,EAAiB,KAAEC,EAAoB,KAC9C,EAA0CN,mBAAS,IAAG,mBAA/CO,EAAa,KAAEC,EAAgB,KACtC,EAA4BR,mBAAS,IAAG,mBAAjCS,EAAM,KAAEC,EAAS,KAElBC,EAAY,iDAAG,WAAOV,EAAME,EAAeE,EAAmBI,GAAM,yFAYrE,OAZqE,SAGvD,iEACTG,EAAU,CACd,eAAgB,mBAChB,cAAgB,UAAD,OAAYH,IAEvBI,EAAM,+BAA2BV,EAAa,wBAAgBE,EAAoB,uBAAuB,GAAE,eAAOJ,GAClHa,EAAO,CACXD,OAAQA,EACRE,YAAa,IACb,EAAD,OACsBC,IAAMC,KAVd,iEAU6BH,EAAM,CAAEF,YAAW,KAAD,EAAxDM,EAAQ,OACRX,EAAgBW,EAASJ,KAAKK,QAAQ,GAAGlB,KAC/CO,EAAiBD,GAAe,kDAEhCa,QAAQC,MAAM,EAAD,IAAQ,0DAExB,gBAnBiB,4CAqBlB,OACE,sBAAKC,UAAU,qBAAoB,UACjC,iCACE,kCAAO,iBAEL,0BAAUC,MAAOtB,EAAMuB,SAAU,SAAAC,GAAC,OAAIvB,EAAQuB,EAAEC,OAAOH,MAAM,OAE/D,uBACA,kCAAO,kBAEL,yBAAQA,MAAOpB,EAAeqB,SAAU,SAAAC,GAAC,OAAIrB,EAAiBqB,EAAEC,OAAOH,MAAM,EAAC,UAC5E,wBAAQA,MAAM,QAAO,SAAC,UACtB,wBAAQA,MAAM,SAAQ,SAAC,WACvB,wBAAQA,MAAM,iBAAgB,SAAC,mBAC/B,wBAAQA,MAAM,cAAa,SAAC,sBAGhC,uBACA,kCACE,uBACEI,KAAK,WACLC,QAASvB,EACTmB,SAAU,SAAAC,GAAC,OAAInB,EAAqBmB,EAAEC,OAAOE,QAAQ,IACrD,yBAGJ,uBACA,kCAAO,WAEP,uBAAOD,KAAK,OAAOJ,MAAOd,EAAQe,SAAU,SAAAC,GAAC,OAAIf,EAAUe,EAAEC,OAAOH,MAAM,OAE1E,uBACA,wBAAQI,KAAK,SAASE,QAAS,kBAAMlB,EAAaV,EAAME,EAAeE,EAAmBI,EAAO,EAAC,SAAC,gBAIrG,uBACA,kCAAO,kBAEL,0BAAUc,MAAOhB,EAAeuB,UAAQ,SAIhD,ECtEMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACC,EAAG,M","file":"static/js/main.4945d888.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from 'axios';\nimport \"./Rephrase.css\";\n\nconst Rephrase = () => {\n  const [text, setText] = useState(\"\");\n  const [languageStyle, setLanguageStyle] = useState(\"slang\");\n  const [translateToArabic, setTranslateToArabic] = useState(false);\n  const [rephrasedText, setRephrasedText] = useState(\"\");\n  const [apiKey, setAPIKey] = useState(\"\");\n  \n  const rephraseText = async (text, languageStyle, translateToArabic, apiKey) => {\n    try {\n     // const endpoint = 'https://api.openai.com/v1/engines/davinci-codex/completions';\n     const endpoint ='https://api.openai.com/v1/engines/text-davinci-003/completions';\n      const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      };\n      const prompt = `Rephrase the text in ${languageStyle} language and${translateToArabic ? ' translate to Arabic':''}:\\n ${text}`;\n      const data = {\n        prompt: prompt,\n        temperature: 0.7,\n      };\n      const response = await axios.post(endpoint, data, { headers });\n      const rephrasedText = response.data.choices[0].text;\n      setRephrasedText(rephrasedText);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className=\"rephrase-container\">\n      <form>\n        <label>\n          Original Text:\n          <textarea value={text} onChange={e => setText(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Language Style:\n          <select value={languageStyle} onChange={e => setLanguageStyle(e.target.value)}>\n            <option value=\"slang\">Slang</option>\n            <option value=\"formal\">Formal</option>\n            <option value=\"simple english\">Simple English</option>\n            <option value=\"very formal\">Very Formal</option>\n          </select>\n        </label>\n        <br />\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={translateToArabic}\n            onChange={e => setTranslateToArabic(e.target.checked)}\n          />\n          Translate to Arabic\n        </label>\n        <br />\n        <label>\n        API Key:\n        <input type=\"text\" value={apiKey} onChange={e => setAPIKey(e.target.value)} />\n        </label>\n        <br />\n        <button type=\"button\" onClick={() => rephraseText(text, languageStyle, translateToArabic, apiKey)}>\n          Rephrase\n        </button>\n      </form>\n      <br />\n      <label>\n        Rephrased Text:\n        <textarea value={rephrasedText} disabled />\n      </label>\n    </div>\n  );\n};\n\nexport default Rephrase;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}